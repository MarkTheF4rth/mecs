# Docker Compose description of the combined application.
#
# 'docker-compose up' will run this.
version: '3'  # requires Docker Compose 1.13 or later

services:
  rabbitmq:
    # This variant is built on Alpine Linux (it's smaller) and includes
    # the management UI.
    image: 'rabbitmq:3-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    networks:
      - rabbitmqnetwork

  sqlite-database:
    image: ucncsteam17/sqlite-event-database:0.0.1
    #command: --init-file /storage/sqlite3-database/databaseSetup.py
    environment:
      SQLITE_DB_LOC: '/storage/sqlite3-database/mecs.db'
      SQLITE_DB_INIT: 'True'
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    volumes:
      #- ./consumers/databaseSetup.py:/storage/sqlite3-database/databaseSetup
      - sqlite3-database:/storage/sqlite3-database
    networks:
      - rabbitmqnetwork

  gateway:
    image: ucncsteam17/gateway:0.0.3
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    networks:
      - rabbitmqnetwork

  # publishes fake data to a queue
  fakedata:
    image: ucncsteam17/fakedata:0.0.2
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    networks:
      - rabbitmqnetwork

  # publishes simulated kibana events to a queue
  kibanaevents:
    image: ucncsteam17/kibanaevents:0.0.1
    environment:
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    networks:
      - rabbitmqnetwork

networks:
  rabbitmqnetwork: {}

volumes:
  sqlite3-database:
